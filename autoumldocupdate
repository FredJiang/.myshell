#!/usr/bin/env node

const dateFormat = require('dateformat');
const fs = require('fs');
const stringify = require('json-stable-stringify');
const { execSync } = require('child_process');

const padLeft = (content, length, padding) => {
  if (length - content.length + 1 <= 0) {
    return content;
  }
  return (new Array(length - content.length + 1).join(padding) + content);
};

const padRight = (content, length, padding) => {
  if (length - content.length + 1 <= 0) {
    return content;
  }
  return (content + new Array(length - content.length + 1).join(padding));
};

let autoumldocKey = '';
if (process.argv.length >= 3) {
  autoumldocKey = process.argv[2];
}
let startNumber = process.argv[3];
let addNumber = process.argv[4];

let agRawResult = execSync(`/usr/local/bin/ag \
--ignore Applications \
--ignore build \
--ignore coverage \
--ignore go \
--ignore Library \
--ignore Music \
--ignore node_modules \
--ignore Pictures \
--ignore Pods \
--ignore target \
--ignore test \
--ignore vendor \
--nocolor \
--nogroup \
"// autoumldoc ${autoumldocKey} [1-9]{1,}[0-9]{0,} "`).toString();

let agLines = agRawResult.split('\n');
let agLineMap = {};

for (let agLine of agLines) {
  if (agLine.length === 0) {
    continue;
  }
  let agLineComponets = agLine.split('//').map((item) => {
    return item.trim();
  });

  let filePositionInfo = agLineComponets[0];
  let autoInfoAndUmlContent = agLineComponets[1];
  let contentInfos = autoInfoAndUmlContent.split(' ');
  let umlContent = contentInfos.slice(3).join(' ');
  let autoType = contentInfos[1];
  let autoIndex = contentInfos[2];
  let autoIndexNew = autoIndex;

  if (!agLineMap[autoType]) {
    agLineMap[autoType] = [];
  }
  if (parseInt(autoIndex) < startNumber) {
    continue;
  } else {
    autoIndexNew = (parseInt(autoIndex) + parseInt(addNumber)).toString();
  }

  agLineMap[autoType].push({
    autoType,
    autoIndex,
    autoIndexNew,
    umlContent,
    filePositionInfo
  });
}

for (let key in agLineMap) {
  agLineMap[key]  =  agLineMap[key].sort((a, b) => {
    return parseInt(a.autoIndex) < parseInt(b.autoIndex);
  });

  let outputContent = '';
  outputContent += '#!/bin/bash\n\n';
  outputContent += 'set -e\n\n';
  outputContent += `cd ${process.cwd()}\n\n`;

  for (let item of agLineMap[key]) {
    let fileName = item.filePositionInfo.split(':')[0];
    outputContent += `sed -i '' -e 's/ autoumldoc ${item.autoType} ${item.autoIndex} / autoumldoc ${item.autoType} ${item.autoIndexNew} /' ${fileName} # ${item.umlContent}\n`;
  }
  // 
  // 

  let outputFileName = `/tmp/com_fred_${process.argv[1].split('/').pop().replace('.', '_')}_${dateFormat(Date.now(), 'yyyy_mm_dd_HH')}_${key}_update.sh`;
  fs.writeFileSync(outputFileName, outputContent);
  console.log(outputContent);

  console.log('');
  console.log('!!! Becareful, using git to backup your file before runing these command');
  console.log(`/bin/bash ${outputFileName}`);
}
